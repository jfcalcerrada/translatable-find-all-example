<?php

namespace Korama\PruebaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Gedmo\Translatable\TranslatableListener;
/**
 * TipoClienteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TipoClienteRepository extends EntityRepository
{
    public function findAll(){
        $query= $this->getEntityManager() ->createQuery('SELECT a FROM KoramaPruebaBundle:TipoCliente a ORDER BY a.nombre ASC');

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        $listener=$this->getTranslatableListener();
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $listener->getListenerLocale() 
        );

        // fallback
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_FALLBACK,
            1 // fallback to default values in case if record is not translated
        );

        return $query->getResult(); 
    }
    
    private $listener=null;
    /**
     * Get the currently used TranslatableListener
     *
     * @throws \Gedmo\Exception\RuntimeException - if listener is not found
     * @return TranslatableListener
     */
    private function getTranslatableListener()
    {
        if (!$this->listener) {
            foreach ($this->_em->getEventManager()->getListeners() as $event => $listeners) {
                foreach ($listeners as $hash => $listener) {
                    if ($listener instanceof TranslatableListener) {
                        $this->listener = $listener;
                        break;
                    }
                }
                if ($this->listener) {
                    break;
                }
            }

            if (is_null($this->listener)) {
                throw new \Gedmo\Exception\RuntimeException('The translation listener could not be found');
            }
        }
        return $this->listener;
    }
}